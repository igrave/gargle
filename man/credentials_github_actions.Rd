% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/credentials_github_actions.R
\name{credentials_github_actions}
\alias{credentials_github_actions}
\title{Get a token using Github Actions}
\usage{
credentials_github_actions(
  project_id,
  workload_identity_provider,
  service_account,
  lifetime,
  scopes = "https://www.googleapis.com/auth/drive.file",
  ...
)
}
\arguments{
\item{project_id}{The google cloud project id}

\item{workload_identity_provider}{The workload identity provider}

\item{service_account}{The service account email address}

\item{lifetime}{Lifespan of token in seconds as a string \code{"300s"}}

\item{scopes}{Requested scopes for the access token}

\item{...}{Additional arguments passed to all credential functions.}
}
\value{
A \code{\link[=WifToken]{WifToken()}} or \code{NULL}.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Workload identity federation is a new (as of April 2021) keyless
authentication mechanism that allows applications running on a non-Google
Cloud platform, such as Github Actions, to access Google Cloud resources without using a
conventional service account token. This eliminates the need to
safely manage service account credential files.

Unlike service accounts, the configuration file for workload identity
federation contains no secrets. Instead, it holds non-sensitive metadata.
The external application obtains the needed sensitive data "on-the-fly" from
the running instance. The combined data is then used to obtain a so-called
subject token from the external identity provider, such as AWS. This is then
sent to Google's Security Token Service API, in exchange for a very
short-lived federated access token. Finally, the federated access token is
sent to Google's Service Account Credentials API, in exchange for a
short-lived GCP access token. This access token allows the external
application to impersonate a service account and inherit the permissions of
the service account to access GCP resources.
}
\examples{
\dontrun{
credentials_github_actions()
}
}
\seealso{
There is some setup required in GCP to enable this auth flow.
This function reimplements the \code{google-github-actions/auth}. The
documentation for that workflow provides instructions on the setup steps.
\itemize{
\item \url{https://github.com/google-github-actions/auth?tab=readme-ov-file#indirect-wif}
}

Other credential functions: 
\code{\link{credentials_app_default}()},
\code{\link{credentials_byo_oauth2}()},
\code{\link{credentials_external_account}()},
\code{\link{credentials_gce}()},
\code{\link{credentials_service_account}()},
\code{\link{credentials_user_oauth2}()},
\code{\link{token_fetch}()}
}
\concept{credential functions}
